name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags:
      - "v*"
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to save CI time
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.9"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install -e ".[test]"

      - name: Run tests
        run: |
          python -m pytest tests/ -v

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 mypy isort pylint

      - name: Format check with black
        run: |
          black --check --diff core business tests

      - name: Import sort check with isort
        run: |
          isort --check-only --diff core business tests

      - name: Lint with flake8
        run: |
          flake8 core business tests --max-line-length=120 --extend-ignore=E203,W503

      - name: Type check with mypy
        run: |
          mypy core --ignore-missing-imports

  security:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Security check with safety
        run: |
          pip install -r requirements.txt
          safety check --json || true  # Don't fail on vulnerabilities, just report

      - name: Security check with bandit
        run: |
          bandit -r core business -ll

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme

      - name: Build documentation
        run: |
          mkdir -p docs
          # Create basic conf.py if it doesn't exist
          if [ ! -f docs/conf.py ]; then
            echo "project = 'Python Trading PubSub'" > docs/conf.py
            echo "author = 'Python Trading PubSub Contributors'" >> docs/conf.py
            echo "release = '0.1.0'" >> docs/conf.py
            echo "extensions = ['sphinx.ext.autodoc', 'sphinx.ext.napoleon']" >> docs/conf.py
            echo "html_theme = 'sphinx_rtd_theme'" >> docs/conf.py
          fi
          # Create basic index.rst if it doesn't exist
          if [ ! -f docs/index.rst ]; then
            echo "Python Trading PubSub Documentation" > docs/index.rst
            echo "====================================" >> docs/index.rst
            echo "" >> docs/index.rst
            echo ".. include:: ../README.md" >> docs/index.rst
          fi
          cd docs && sphinx-build -b html . _build/html || echo "Documentation build skipped"

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          twine upload --repository testpypi dist/* || echo "Test PyPI upload skipped"

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/* || echo "PyPI upload skipped (configure PYPI_API_TOKEN secret)"

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease:
            ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') ||
            contains(github.ref, 'alpha') }}
